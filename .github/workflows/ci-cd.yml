name: codiit-backend-ci-cd

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

permissions:
  contents: read

jobs:
  # Build
  build:
    name: Build (Nest + Prisma)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Build project
        run: npm run build

  # Docker build/push, EC2 deploy, Health check
  docker-and-deploy:
    name: Docker build/push -> Deploy to EC2 -> Health check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker Hub 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Docker 이미지 빌드
      - name: Build Docker image
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
        run: |
          if [ -z "${IMAGE}" ]; then
            echo "ERROR: IMAGE is empty. Check DOCKER_USERNAME / IMAGE_NAME secrets."
            exit 1
          fi
          docker build --no-cache -t "$IMAGE:latest" -t "$IMAGE:${{ github.sha }}" .

      # Docker 이미지 푸시
      - name: Push Docker image
        env:
          IMAGE: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}
        run: |
          docker push "$IMAGE:latest"
          docker push "$IMAGE:${{ github.sha }}"

      # .env 파일 EC2에 업로드
      - name: Upload .env to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            mkdir -p ~/apps/NB02_CODI-IT_BE
            cat > ~/apps/NB02_CODI-IT_BE/.env << 'EOF'
            ${{ secrets.ENV_PROD }}
            EOF

      # EC2에서 Docker Hub 로그인
      - name: Login Docker Hub on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Prisma migrate 실행
      - name: Run Prisma Migrate on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}"
            ENV_FILE=~/apps/NB02_CODI-IT_BE/.env

            # .env 유효성 검사
            if [ ! -f "$ENV_FILE" ]; then
              echo "ERROR: $ENV_FILE not found"
              exit 1
            fi
            if ! grep -qE '^DATABASE_URL=' "$ENV_FILE"; then
              echo "ERROR: DATABASE_URL missing in $ENV_FILE"
              exit 1
            fi
            if ! grep -qE '^DATABASE_URL=(postgresql|postgres)://' "$ENV_FILE"; then
              echo "ERROR: DATABASE_URL must start with postgresql:// or postgres://"
              exit 1
            fi

            echo "Running Prisma Migrate..."
            docker pull "$IMAGE:latest"
            docker run --rm --env-file "$ENV_FILE" "$IMAGE:latest" npx prisma migrate deploy

      # 컨테이너 배포
      - name: Deploy new container on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            set -e
            IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.IMAGE_NAME }}"
            CONTAINER_NAME="${{ secrets.CONTAINER_NAME }}"
            ENV_FILE=~/apps/NB02_CODI-IT_BE/.env

            [ -z "$CONTAINER_NAME" ] && CONTAINER_NAME="codiit-backend"

            echo "Deploying $IMAGE as $CONTAINER_NAME (bind 127.0.0.1:3000)"

            docker pull "$IMAGE:latest"
            docker stop "$CONTAINER_NAME" || true
            docker rm "$CONTAINER_NAME" || true

            docker run -d \
              --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              --env-file "$ENV_FILE" \
              -p 127.0.0.1:3000:3000 \
              "$IMAGE:latest"

            docker image prune -f
